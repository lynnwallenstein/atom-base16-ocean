// ------------------------------------------------------------------
// Lists
// ------------------------------------------------------------------

.list-group,
.list-tree {

  .selected:before {
    background-color: @base16-00;
  }

  li:not(.list-nested-item),
  li.list-nested-item > .list-item {
    .text(normal);
  }

  .generate-list-item-text-color(@class) {

    li:not(.list-nested-item).text-@{class},
    li.list-nested-item.text-@{class} > .list-item {
      .text(@class);
    }

  } // .generate-list-item-text-color(@class) {

  .generate-list-item-text-color(subtle);
  .generate-list-item-text-color(info);
  .generate-list-item-text-color(success);
  .generate-list-item-text-color(warning);
  .generate-list-item-text-color(error);
  .generate-list-item-text-color(selected);

  .generate-list-item-status-color(@color, @status) {

    li:not(.list-nested-item).status-@{status},
    li.list-nested-item.status-@{status} > .list-item {
      color: @color;
    }

  } // .generate-list-item-status-color(@color, @status) {

  .generate-list-item-status-color(@text-color-subtle, ignored);
  .generate-list-item-status-color(@text-color-added, added);
  .generate-list-item-status-color(@text-color-renamed, renamed);
  .generate-list-item-status-color(@text-color-modified, modified);
  .generate-list-item-status-color(@text-color-removed, removed);

  li:not(.list-nested-item).selected,
  li.list-nested-item.selected > .list-item {
    .text(selected);
  }

} // .list-group, ..

.select-list ol.list-group,
&.select-list ol.list-group {

  li.two-lines {

    .secondary-line {
      color: @text-color-subtle;
      margin-bottom: 0;
    }

    &.selected .secondary-line {
      color: @text-color;
      text-shadow: none;
    }

  } // li.two-lines {

  // We want to highlight the background of the list items because we dont
  // know their size.

  li.selected {
    background-color: @background-color-selected;

    &:before {
      display: none;
    }

  } // li.selected {

  &.mark-active{
    @active-icon-size: 14px;

    // pad in front of the text where the icon would be We'll pad the non-
    // active items with a 'fake' icon so other classes can pad the item
    // without worrying about the icon padding.
    li:before {
      content: '';
      background-color: transparent;
      position: static;
      display: inline-block;
      left: auto; right: auto;
      height: @active-icon-size;
      width: @active-icon-size;
    }

    > li:not(.active):before {
      margin-right: @component-icon-padding;
    }

    li.active {

      .octicon(check, @active-icon-size);

      &:before {
        margin-right: @component-icon-padding;
        color: @text-color-success;
      }

    } // li.active {

  } // &.mark-active{

} // .select-list ol.list-group,

.select-list.popover-list {
  background-color: @overlay-background-color;
  border: 1px solid @overlay-border-color;
  border-radius: @component-border-radius;
  box-shadow: 0 0 10px @base-border-color;
  padding: @component-padding/2;

  .editor {
    margin-bottom: @component-padding/2;
  }

  .list-group li {
    padding-left: @component-padding/2;
  }

} // .select-list.popover-list {

.ui-sortable {

  li {
    line-height: 2.5;

    // For sortable lists in the settings view
    &.ui-sortable-placeholder {
      background-color: darken(@pane-item-background-color, 10%);
      visibility: visible !important;
    }

  } // li

} // .ui-sortable {

li.ui-draggable-dragging,
li.ui-sortable-helper {
  background: @background-color-highlight;
  border: 0;
  border-radius: 0;
  box-shadow: 0 0 1px @base-border-color;
  height: @component-line-height;
  line-height: @component-line-height;
  list-style: none;
  padding: 0 @component-padding;
}
